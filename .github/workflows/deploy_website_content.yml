name: deploy_website_content

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      TARGET_ENVIRONMENT:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true
jobs:
  deploy_website_content:
    name: "deploy website content"
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout local github actions
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
          sparse-checkout: |
            .github

      - name: Configure AWS Credentials
        id: connect-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-deploy-website
          output-credentials: true

      - name: build_artifact download
        uses: actions/download-artifact@v4
        with:
          name: build_artifact

      - name: extract build_artifact
        run: |
          mkdir -p .build
          tar -xf artifact.tar -C .build

      - name: Set Environment Variables
        id: setup-env
        run: |
          CF_LONDON_EXPORTS=$(aws cloudformation list-exports --region eu-west-2 --output json)
          CF_US_EXPORTS=$(aws cloudformation list-exports --region us-east-1 --output json)
          SERVICE_NAME='${{ inputs.SERVICE_NAME }}'
          hostedLoginDomain=$(echo "$CF_US_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-us-certs:fullCognitoDomain:Name" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          userPoolClientId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:userPoolClient:userPoolClientId" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          userPoolId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:userPool:Id" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          fullCloudfrontDomain=$(echo "$CF_US_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-us-certs:fullCloudfrontDomain:Name" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumUnauthenticatedRumRoleArn=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:unauthenticatedRumRole:Arn" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumIdentityPoolId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:identityPool:Id" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumAppId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:rumApp:Id" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumAllowCookies=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:allowCookies" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumEnableXRay=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:enableXRay" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumSessionSampleRate=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:sessionSampleRate" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumTelemetries=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:telemetries" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')

          {
            echo "hostedLoginDomain=${hostedLoginDomain}"
            echo "userPoolClientId=${userPoolClientId}"
            echo "userPoolId=${userPoolId}"
            echo "fullCloudfrontDomain=${fullCloudfrontDomain}"
            echo "rumUnauthenticatedRumRoleArn=${rumUnauthenticatedRumRoleArn}"
            echo "rumIdentityPoolId=${rumIdentityPoolId}"
            echo "rumAppId=${rumAppId}"
            echo "rumAllowCookies=${rumAllowCookies}"
            echo "rumEnableXRay=${rumEnableXRay}"
            echo "rumSessionSampleRate=${rumSessionSampleRate}"
            echo "rumTelemetries=${rumTelemetries}"
            } >> "$GITHUB_ENV"

      - name: build react app
        run: |
          export VITE_hostedLoginDomain=${hostedLoginDomain}
          export VITE_userPoolClientId=${userPoolClientId}
          export VITE_userPoolId=${userPoolId}
          export VITE_redirectSignIn="https://${fullCloudfrontDomain}/site/select-your-role"
          export VITE_redirectSignOut="https://${fullCloudfrontDomain}/site/logout"
          export VITE_COMMIT_ID=${{ inputs.COMMIT_ID }}
          export VITE_TARGET_ENVIRONMENT=${{ inputs.TARGET_ENVIRONMENT }}
          export VITE_RUM_GUEST_ROLE_ARN=${rumUnauthenticatedRumRoleArn}
          export VITE_RUM_IDENTITY_POOL_ID=${rumIdentityPoolId}
          export VITE_RUM_APPLICATION_ID=${rumAppId}
          export VITE_RUM_ALLOW_COOKIES=${rumAllowCookies}
          export VITE_RUM_ENABLE_XRAY=${rumEnableXRay}
          export VITE_RUM_SESSION_SAMPLE_RATE=${rumSessionSampleRate}
          export VITE_RUM_TELEMETRIES=${rumTelemetries}

          cd .build
          make react-build

      - name: build auth_demo react app (temp step for testing)
        run: |
          export REACT_APP_hostedLoginDomain=${hostedLoginDomain}
          export REACT_APP_userPoolClientId=${userPoolClientId}
          export REACT_APP_userPoolId=${userPoolId}
          export REACT_APP_redirectSignIn="https://${fullCloudfrontDomain}/auth_demo/"

          cd .build
          make auth_demo_build

      - name: deploy website
        run: |
          staticBucketName=$(aws cloudformation list-exports --query "Exports[?Name=='${{ inputs.SERVICE_NAME }}-stateful-resources:StaticContentBucket:Name'].Value" --output text)
          aws s3 cp ".build/packages/staticContent/404.html" "s3://${staticBucketName}/404.html"
          aws s3 cp ".build/packages/staticContent/404.css" "s3://${staticBucketName}/404.css"
          aws s3 cp ".build/packages/staticContent/500.html" "s3://${staticBucketName}/500.html"
          aws s3 cp ".build/packages/staticContent/jwks/${{ inputs.TARGET_ENVIRONMENT }}/jwks.json" "s3://${staticBucketName}/jwks.json"
          aws s3 cp --recursive ".build/packages/cpt-ui/dist/" "s3://${staticBucketName}/${{ inputs.VERSION_NUMBER }}/"
          aws s3 cp  ".build/packages/cpt-ui/dist/assets/" "s3://${staticBucketName}/source_maps/${{ inputs.COMMIT_ID }}/site/assets/" --exclude "*" --include "*.map" --recursive

      - name: deploy auth_demo website (temp for testing)
        run: |
          staticBucketName=$(aws cloudformation list-exports --query "Exports[?Name=='${{ inputs.SERVICE_NAME }}-stateful-resources:StaticContentBucket:Name'].Value" --output text)
          aws s3 cp --recursive ".build/packages/auth_demo/build/" "s3://${staticBucketName}/auth_demo/"
