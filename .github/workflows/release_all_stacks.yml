name: release all stacks

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      TARGET_ENVIRONMENT:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
      useMockOidc:
        type: boolean
        default: false
      RUN_REGRESSION_TESTS:
        type: boolean
        default: true
      primaryOidcIssuer:
        type: string
      primaryOidcAuthorizeEndpoint:
        type: string
      primaryOidcTokenEndpoint:
        type: string
      primaryOidcUserInfoEndpoint:
        type: string
      primaryOidcjwksEndpoint:
        type: string
      mockOidcIssuer:
        type: string
      mockOidcAuthorizeEndpoint:
        type: string
      mockOidcTokenEndpoint:
        type: string
      mockOidcUserInfoEndpoint:
        type: string
      mockOidcjwksEndpoint:
        type: string
      useLocalhostCallback:
        type: boolean
      useCustomCognitoDomain:
        type: boolean
      LOG_LEVEL:
          type: string
      APIGEE_CIS2_TOKEN_ENDPOINT:
        type: string
      APIGEE_MOCK_TOKEN_ENDPOINT:
        type: string
      APIGEE_PRESCRIPTIONS_ENDPOINT:
        type: string
      APIGEE_PDS_ENDPOINT:
        type: string
      JWT_KID:
        type: string
      ROLE_ID:
        type: string
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true
      CDK_PULL_IMAGE_ROLE:
        required: true
      primaryOidcClientId:
        required: false
      mockOidcClientId:
        required: false
      CIS2_PRIVATE_KEY:
        required: true
      REGRESSION_TESTS_PEM:
        required: true
      APIGEE_API_KEY:
        required: true

jobs:
  check_first_deployment:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: read
    outputs:
      FIRST_DEPLOYMENT: ${{ steps.get_cloudfront_distribution_id.outputs.FIRST_DEPLOYMENT }}
    steps:
      - name: Configure AWS Credentials
        id: connect-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-check-deployment
          output-credentials: true

      - name: get cloudfront distribution id
        id: get_cloudfront_distribution_id
        run: |
          # shellcheck disable=SC2140
          cloudfrontDistributionId=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:cloudfrontDistribution:Id"'].Value" --output text)
          if [ -z "${cloudfrontDistributionId}" ]; then
            FIRST_DEPLOYMENT="true"
            echo "This is the first deployment"
          else
            FIRST_DEPLOYMENT="false"
            echo "This is not the first deployment"
          fi
          echo "FIRST_DEPLOYMENT=$FIRST_DEPLOYMENT" >> "$GITHUB_OUTPUT"
        shell: bash

  release_stateful_resources:
    uses: ./.github/workflows/cdk_release_code.yml
    with:
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      TARGET_ENVIRONMENT: ${{ inputs.TARGET_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      COMMIT_ID: ${{ inputs.COMMIT_ID }}
      CDK_APP_NAME: StatefulResourcesApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: ${{ inputs.LOG_LEVEL }}
      useMockOidc: ${{ inputs.useMockOidc }}
      primaryOidcIssuer: ${{ inputs.primaryOidcIssuer }}
      primaryOidcAuthorizeEndpoint: ${{ inputs.primaryOidcAuthorizeEndpoint }}
      primaryOidcTokenEndpoint: ${{ inputs.primaryOidcTokenEndpoint }}
      primaryOidcUserInfoEndpoint: ${{ inputs.primaryOidcUserInfoEndpoint }}
      primaryOidcjwksEndpoint: ${{ inputs.primaryOidcjwksEndpoint }}
      mockOidcIssuer: ${{ inputs.mockOidcIssuer }}
      mockOidcAuthorizeEndpoint: ${{ inputs.mockOidcAuthorizeEndpoint }}
      mockOidcTokenEndpoint: ${{ inputs.mockOidcTokenEndpoint }}
      mockOidcUserInfoEndpoint: ${{ inputs.mockOidcUserInfoEndpoint }}
      mockOidcjwksEndpoint: ${{ inputs.mockOidcjwksEndpoint }}
      useLocalhostCallback: ${{ inputs.useLocalhostCallback }}
      useCustomCognitoDomain: ${{ inputs.useCustomCognitoDomain }}
      JWT_KID: ${{ inputs.JWT_KID }}
      ROLE_ID: ${{ inputs.ROLE_ID }}
    secrets:
      CDK_PULL_IMAGE_ROLE: ${{ secrets.CDK_PULL_IMAGE_ROLE }}
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
      primaryOidcClientId: ${{ secrets.primaryOidcClientId }}
      mockOidcClientId: ${{ secrets.mockOidcClientId }}

  deploy_website_content:
    uses: ./.github/workflows/deploy_website_content.yml
    needs: [release_stateful_resources]
    with:
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      TARGET_ENVIRONMENT: ${{ inputs.TARGET_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      COMMIT_ID: ${{ inputs.COMMIT_ID }}
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}

  release_stateless_resources:
    uses: ./.github/workflows/cdk_release_code.yml
    needs: [deploy_website_content]
    with:
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      TARGET_ENVIRONMENT: ${{ inputs.TARGET_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      COMMIT_ID: ${{ inputs.COMMIT_ID }}
      CDK_APP_NAME: StatelessResourcesApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: ${{ inputs.LOG_LEVEL }}
      useMockOidc: ${{ inputs.useMockOidc }}
      primaryOidcIssuer: ${{ inputs.primaryOidcIssuer }}
      primaryOidcAuthorizeEndpoint: ${{ inputs.primaryOidcAuthorizeEndpoint }}
      primaryOidcTokenEndpoint: ${{ inputs.primaryOidcTokenEndpoint }}
      primaryOidcUserInfoEndpoint: ${{ inputs.primaryOidcUserInfoEndpoint }}
      primaryOidcjwksEndpoint: ${{ inputs.primaryOidcjwksEndpoint }}
      mockOidcIssuer: ${{ inputs.mockOidcIssuer }}
      mockOidcAuthorizeEndpoint: ${{ inputs.mockOidcAuthorizeEndpoint }}
      mockOidcTokenEndpoint: ${{ inputs.mockOidcTokenEndpoint }}
      mockOidcUserInfoEndpoint: ${{ inputs.mockOidcUserInfoEndpoint }}
      mockOidcjwksEndpoint: ${{ inputs.mockOidcjwksEndpoint }}
      useLocalhostCallback: ${{ inputs.useLocalhostCallback }}
      useCustomCognitoDomain: ${{ inputs.useCustomCognitoDomain }}
      APIGEE_CIS2_TOKEN_ENDPOINT: ${{ inputs.APIGEE_CIS2_TOKEN_ENDPOINT }}
      APIGEE_MOCK_TOKEN_ENDPOINT: ${{ inputs.APIGEE_MOCK_TOKEN_ENDPOINT }}
      APIGEE_PRESCRIPTIONS_ENDPOINT: ${{ inputs.APIGEE_PRESCRIPTIONS_ENDPOINT }}
      APIGEE_PDS_ENDPOINT: ${{ inputs.APIGEE_PDS_ENDPOINT }}
      JWT_KID: ${{ inputs.JWT_KID }}
      ROLE_ID: ${{ inputs.ROLE_ID }}
    secrets:
      CDK_PULL_IMAGE_ROLE: ${{ secrets.CDK_PULL_IMAGE_ROLE }}
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
      primaryOidcClientId: ${{ secrets.primaryOidcClientId }}
      mockOidcClientId: ${{ secrets.mockOidcClientId }}
      APIGEE_API_KEY: ${{ secrets.APIGEE_API_KEY }}

  update_cloudfront_kvs:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    needs: [release_stateless_resources]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        id: connect-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-deployment
          output-credentials: true

      - name: update cloudfront kvs
        id: update_cloudfront_kvs
        shell: bash
        run: |
          # shellcheck disable=SC2140
          keyValueStore=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:KeyValueStore:Arn"'].Value" --output text)
          # shellcheck disable=SC2140
          cloudfrontDistributionId=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:cloudfrontDistribution:Id"'].Value" --output text)
          # shellcheck disable=SC2140
          primaryJwtPrivateKeyArn=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:primaryJwtPrivateKey:Arn"'].Value" --output text)
          # shellcheck disable=SC2140
          mockJwtPrivateKeyArn=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:mockJwtPrivateKey:Arn"'].Value" --output text)

          newVersion="${{ inputs.VERSION_NUMBER }}"

          ETag=$(aws cloudfront-keyvaluestore describe-key-value-store \
              --kvs-arn="$keyValueStore" \
              --query ETag --output text)

          existing_keys=$(aws cloudfront-keyvaluestore list-keys --kvs-arn "$keyValueStore" --query "Items[?Key=='site_version']" --output text)

          # Check if "version" key exists
          if [[ -z "$existing_keys" ]]; then
            # Insert a new "version" key
            aws cloudfront-keyvaluestore put-key \
              --if-match="${ETag}" \
              --key=site_version \
              --value="$newVersion"\
              --kvs-arn "$keyValueStore"
            echo "Inserted new 'site_version' key with value $newVersion."
          else
            # Update the existing "version" key
            aws cloudfront-keyvaluestore update-keys \
              --if-match="${ETag}" \
              --kvs-arn "$keyValueStore" \
              --puts Key=site_version,Value="$newVersion"
            echo "Updated the 'site_version' key to $newVersion."
          fi

          # invalidate the cache
          aws cloudfront create-invalidation --distribution-id "${cloudfrontDistributionId}" --paths '/*'

          # set the primaryJwtPrivateKeyArn secret
          if [ -z "${primaryJwtPrivateKeyArn}" ]; then
            echo "primaryJwtPrivateKeyArn is unset or set to the empty string"
          else
            aws secretsmanager put-secret-value --secret-id "${primaryJwtPrivateKeyArn}" --secret-string "${{ secrets.CIS2_PRIVATE_KEY }}"
          fi
          # set the mockJwtPrivateKeyArn secret
          if [ -z "${mockJwtPrivateKeyArn}" ]; then
            echo "mockJwtPrivateKeyArn is unset or set to the empty string"
          else
            aws secretsmanager put-secret-value --secret-id "${mockJwtPrivateKeyArn}" --secret-string "${{ secrets.CIS2_PRIVATE_KEY }}"
          fi
  rerelease_stateful_resources:
    if: ${{ needs.check_first_deployment.outputs.FIRST_DEPLOYMENT == 'true' }}
    uses: ./.github/workflows/cdk_release_code.yml
    needs: [check_first_deployment, release_stateless_resources]
    with:
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      TARGET_ENVIRONMENT: ${{ inputs.TARGET_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      COMMIT_ID: ${{ inputs.COMMIT_ID }}
      CDK_APP_NAME: StatefulResourcesApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: ${{ inputs.LOG_LEVEL }}
      useMockOidc: ${{ inputs.useMockOidc }}
      primaryOidcIssuer: ${{ inputs.primaryOidcIssuer }}
      primaryOidcAuthorizeEndpoint: ${{ inputs.primaryOidcAuthorizeEndpoint }}
      primaryOidcTokenEndpoint: ${{ inputs.primaryOidcTokenEndpoint }}
      primaryOidcUserInfoEndpoint: ${{ inputs.primaryOidcUserInfoEndpoint }}
      primaryOidcjwksEndpoint: ${{ inputs.primaryOidcjwksEndpoint }}
      mockOidcIssuer: ${{ inputs.mockOidcIssuer }}
      mockOidcAuthorizeEndpoint: ${{ inputs.mockOidcAuthorizeEndpoint }}
      mockOidcTokenEndpoint: ${{ inputs.mockOidcTokenEndpoint }}
      mockOidcUserInfoEndpoint: ${{ inputs.mockOidcUserInfoEndpoint }}
      mockOidcjwksEndpoint: ${{ inputs.mockOidcjwksEndpoint }}
      useLocalhostCallback: ${{ inputs.useLocalhostCallback }}
      useCustomCognitoDomain: ${{ inputs.useCustomCognitoDomain }}
      JWT_KID: ${{ inputs.JWT_KID }}
    secrets:
      CDK_PULL_IMAGE_ROLE: ${{ secrets.CDK_PULL_IMAGE_ROLE }}
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
      primaryOidcClientId: ${{ secrets.primaryOidcClientId }}
      mockOidcClientId: ${{ secrets.mockOidcClientId }}

  update_github_pages:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    if: ${{ always() && !failure() && !cancelled() }}
    needs: [release_stateful_resources, release_stateless_resources, rerelease_stateful_resources, deploy_website_content, update_cloudfront_kvs]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout gh-pages
        if: ${{ !startsWith(inputs.SERVICE_NAME, 'cpt-ui-pr-') }}
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: update release tag in github pages
        if: ${{ !startsWith(inputs.SERVICE_NAME, 'cpt-ui-pr-') }}
        run: |
          cd gh-pages
          NOW=$(date +'%Y-%m-%dT%H:%M:%S')
          echo "tag,release_datetime" > _data/${{ inputs.TARGET_ENVIRONMENT }}_latest.csv
          echo "${{ inputs.VERSION_NUMBER }},${NOW}" >> _data/${{ inputs.TARGET_ENVIRONMENT }}_latest.csv
          echo "${{ inputs.VERSION_NUMBER }},${NOW}" >> _data/${{ inputs.TARGET_ENVIRONMENT }}_deployments.csv
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add _data/${{ inputs.TARGET_ENVIRONMENT }}_latest.csv
          git add _data/${{ inputs.TARGET_ENVIRONMENT }}_deployments.csv
          git commit -m 'update releases for ${{ inputs.TARGET_ENVIRONMENT }}'
          parallel --retries 10 --delay 3 ::: "git pull --rebase && git push"

  regression_tests:
    name: Regression Tests
    uses: ./.github/workflows/run_regression_tests.yml
    if: ${{ always() && !failure() && !cancelled() && inputs.RUN_REGRESSION_TESTS == true }}
    needs: [release_stateful_resources, release_stateless_resources, rerelease_stateful_resources, deploy_website_content, update_cloudfront_kvs]
    with:
      ENVIRONMENT: ${{ inputs.TARGET_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
    secrets:
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}
