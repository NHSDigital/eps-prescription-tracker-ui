name: release all stacks

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      TARGET_ENVIRONMENT:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
      useMockOidc:
        type: boolean
        default: false
      RUN_REGRESSION_TESTS:
        type: boolean
        default: true
      primaryOidcIssuer:
        type: string
      primaryOidcAuthorizeEndpoint:
        type: string
      primaryOidcTokenEndpoint:
        type: string
      primaryOidcUserInfoEndpoint:
        type: string
      primaryOidcjwksEndpoint:
        type: string
      mockOidcIssuer:
        type: string
      mockOidcAuthorizeEndpoint:
        type: string
      mockOidcTokenEndpoint:
        type: string
      mockOidcUserInfoEndpoint:
        type: string
      mockOidcjwksEndpoint:
        type: string
      allowLocalhostAccess:
        type: boolean
      useCustomCognitoDomain:
        type: boolean
      LOG_LEVEL:
          type: string
      APIGEE_CIS2_TOKEN_ENDPOINT:
        type: string
      APIGEE_MOCK_TOKEN_ENDPOINT:
        type: string
      APIGEE_PRESCRIPTIONS_ENDPOINT:
        type: string
      APIGEE_PDS_ENDPOINT:
        type: string
      APIGEE_DOHS_ENDPOINT:
        type: string
      JWT_KID:
        type: string
      ROLE_ID:
        type: string
      USE_ZONE_APEX:
        type: boolean
        description: If this is set to true, then the website is deployed using name of the apex of the route 53 zone, otherwise it deploys at cpt-ui..
      ROUTE53_EXPORT_NAME:
        type: string
        description: This is the part of the route53 export name to use to identify the route 53 zone where the domain names are created - can be either EPS (for *.national.nhs.uk) or CPT (for prescriptiontracker.nhs.uk)
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true
      CDK_PULL_IMAGE_ROLE:
        required: true
      primaryOidcClientId:
        required: false
      mockOidcClientId:
        required: false
      CIS2_PRIVATE_KEY:
        required: true
      REGRESSION_TESTS_PEM:
        required: true
      APIGEE_API_KEY:
        required: true
      APIGEE_API_SECRET:
        required: true
      APIGEE_PTL_DOHS_API_KEY:
        required: false

jobs:
  release_all_code:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout local github actions
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
          sparse-checkout: |
            .github
      - name: Configure AWS Credentials
        id: connect_aws_pull_image
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CDK_PULL_IMAGE_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-pull-image
      - name: build_artifact download
        uses: actions/download-artifact@v4
        with:
          name: build_artifact

      - name: extract build_artifact
        run: |
          mkdir -p .build
          tar -xf artifact.tar -C .build

      - name: Retrieve AWS Account ID
        id: retrieve_aws_account_id
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"

      - name: Login to Amazon ECR
        id: login_ecr
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

      - name: Pull cdk-utils-build from Amazon ECR
        run: |
          docker pull "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest"
          docker tag "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest" cdk-utils-build-repo:latest

      - name: Configure AWS Credentials
        id: connect_aws_for_deployment
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-deployment
          output-credentials: true
  
      - name: check first deployment
        id: check_first_deployment
        run: |
          # shellcheck disable=SC2140
          cloudfrontDistributionId=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:cloudfrontDistribution:Id"'].Value" --output text)
          if [ -z "${cloudfrontDistributionId}" ]; then
            FIRST_DEPLOYMENT="true"
            echo "This is the first deployment"
          else
            FIRST_DEPLOYMENT="false"
            echo "This is not the first deployment"
          fi
          echo "FIRST_DEPLOYMENT=$FIRST_DEPLOYMENT" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: fix cdk.json for deployment stateful stack
        run: |
          ./.github/scripts/fix_cdk_json.sh .build/stateful_resources.json
          echo "******"
        env:
          SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
          VERSION_NUMBER: "${{ inputs.VERSION_NUMBER }}"
          COMMIT_ID: "${{ inputs.COMMIT_ID }}"
          LOG_RETENTION_IN_DAYS: 30
          LOG_LEVEL: "${{ inputs.LOG_LEVEL }}"
          AUTO_DELETE_OBJECTS: "true"
          USE_MOCK_OIDC: "${{ inputs.useMockOidc }}"
          PRIMARY_OIDC_CLIENT_ID: "${{ secrets.primaryOidcClientId }}"
          PRIMARY_OIDC_ISSUER: "${{ inputs.primaryOidcIssuer }}"
          PRIMARY_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.primaryOidcAuthorizeEndpoint }}"
          PRIMARY_OIDC_TOKEN_ENDPOINT: "${{ inputs.primaryOidcTokenEndpoint }}"
          PRIMARY_OIDC_USERINFO_ENDPOINT: "${{ inputs.primaryOidcUserInfoEndpoint }}"
          PRIMARY_OIDC_JWKS_ENDPOINT: "${{ inputs.primaryOidcjwksEndpoint }}"
          MOCK_OIDC_CLIENT_ID: "${{ secrets.mockOidcClientId }}"
          MOCK_OIDC_ISSUER: "${{ inputs.mockOidcIssuer }}"
          MOCK_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.mockOidcAuthorizeEndpoint }}"
          MOCK_OIDC_TOKEN_ENDPOINT: "${{ inputs.mockOidcTokenEndpoint }}"
          MOCK_OIDC_USERINFO_ENDPOINT: "${{ inputs.mockOidcUserInfoEndpoint }}"
          MOCK_OIDC_JWKS_ENDPOINT: ${{ inputs.mockOidcjwksEndpoint }}
          USE_CUSTOM_COGNITO_DOMAIN: ${{ inputs.useCustomCognitoDomain }}
          ALLOW_LOCALHOST_ACCESS: ${{ inputs.allowLocalhostAccess }}
          APIGEE_CIS2_TOKEN_ENDPOINT: ${{ inputs.APIGEE_CIS2_TOKEN_ENDPOINT }}
          APIGEE_MOCK_TOKEN_ENDPOINT: ${{ inputs.APIGEE_MOCK_TOKEN_ENDPOINT }}
          APIGEE_PRESCRIPTION_ENDPOINT: ${{ inputs.APIGEE_PRESCRIPTIONS_ENDPOINT }}
          APIGEE_PERSONAL_DEMOGRAPHICS_ENDPOINT: ${{ inputs.APIGEE_PDS_ENDPOINT }}
          APIGEE_DOHS_ENDPOINT: ${{ inputs.APIGEE_DOHS_ENDPOINT }}
          APIGEE_API_KEY: ${{ secrets.APIGEE_API_KEY }}
          APIGEE_API_SECRET: ${{ secrets.APIGEE_API_SECRET }}
          APIGEE_PTL_DOHS_API_KEY: ${{ secrets.APIGEE_PTL_DOHS_API_KEY }}
          JWT_KID: ${{ inputs.JWT_KID }}
          ROLE_ID: ${{ inputs.ROLE_ID }}
          CDK_APP_NAME: StatefulResourcesApp
          USE_ZONE_APEX: ${{ inputs.USE_ZONE_APEX }}
          ROUTE53_EXPORT_NAME: ${{ inputs.ROUTE53_EXPORT_NAME }}

      - name: Show diff for stateful stack
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect_aws_for_deployment.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect_aws_for_deployment.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect_aws_for_deployment.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="true" \
          -e DEPLOY_CODE="false" \
          -e CONFIG_FILE_NAME="stateful_resources.json" \
          -e CDK_APP_PATH="packages/cdk/bin/StatefulResourcesApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash

      - name: Deploy for stateful stack
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect_aws_for_deployment.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect_aws_for_deployment.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect_aws_for_deployment.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="false" \
          -e DEPLOY_CODE="true" \
          -e CONFIG_FILE_NAME="stateful_resources.json" \
          -e CDK_APP_PATH="packages/cdk/bin/StatefulResourcesApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash
      - name: Set Environment Variables for website deployment
        id: setup_env_website_deployment
        run: |
          CF_LONDON_EXPORTS=$(aws cloudformation list-exports --region eu-west-2 --output json)
          CF_US_EXPORTS=$(aws cloudformation list-exports --region us-east-1 --output json)
          SERVICE_NAME='${{ inputs.SERVICE_NAME }}'
          hostedLoginDomain=$(echo "$CF_US_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-us-certs:fullCognitoDomain:Name" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          userPoolClientId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:userPoolClient:userPoolClientId" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          userPoolId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:userPool:Id" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          fullCloudfrontDomain=$(echo "$CF_US_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-us-certs:fullCloudfrontDomain:Name" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumUnauthenticatedRumRoleArn=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:unauthenticatedRumRole:Arn" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumIdentityPoolId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:identityPool:Id" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumAppId=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:rumApp:Id" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumAllowCookies=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:allowCookies" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumEnableXRay=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:enableXRay" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumSessionSampleRate=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:sessionSampleRate" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')
          rumTelemetries=$(echo "$CF_LONDON_EXPORTS" | jq  --arg EXPORT_NAME "${SERVICE_NAME}-stateful-resources:rum:config:telemetries" -r '.Exports[] | select(.Name == $EXPORT_NAME) | .Value')

          {
            echo "hostedLoginDomain=${hostedLoginDomain}"
            echo "userPoolClientId=${userPoolClientId}"
            echo "userPoolId=${userPoolId}"
            echo "fullCloudfrontDomain=${fullCloudfrontDomain}"
            echo "rumUnauthenticatedRumRoleArn=${rumUnauthenticatedRumRoleArn}"
            echo "rumIdentityPoolId=${rumIdentityPoolId}"
            echo "rumAppId=${rumAppId}"
            echo "rumAllowCookies=${rumAllowCookies}"
            echo "rumEnableXRay=${rumEnableXRay}"
            echo "rumSessionSampleRate=${rumSessionSampleRate}"
            echo "rumTelemetries=${rumTelemetries}"
            } >> "$GITHUB_ENV"

      - name: build react app
        run: |
          export VITE_hostedLoginDomain=${hostedLoginDomain}
          export VITE_userPoolClientId=${userPoolClientId}
          export VITE_userPoolId=${userPoolId}
          export VITE_redirectSignIn="https://${fullCloudfrontDomain}/site/select-your-role"
          export VITE_redirectSignOut="https://${fullCloudfrontDomain}/site/logout"
          export VITE_COMMIT_ID=${{ inputs.COMMIT_ID }}
          export VITE_TARGET_ENVIRONMENT=${{ inputs.TARGET_ENVIRONMENT }}
          export VITE_RUM_GUEST_ROLE_ARN=${rumUnauthenticatedRumRoleArn}
          export VITE_RUM_IDENTITY_POOL_ID=${rumIdentityPoolId}
          export VITE_RUM_APPLICATION_ID=${rumAppId}
          export VITE_RUM_ALLOW_COOKIES=${rumAllowCookies}
          export VITE_RUM_ENABLE_XRAY=${rumEnableXRay}
          export VITE_RUM_SESSION_SAMPLE_RATE=${rumSessionSampleRate}
          export VITE_RUM_TELEMETRIES=${rumTelemetries}

          cd .build
          make react-build

      - name: build auth_demo react app (temp step for testing)
        run: |
          export REACT_APP_hostedLoginDomain=${hostedLoginDomain}
          export REACT_APP_userPoolClientId=${userPoolClientId}
          export REACT_APP_userPoolId=${userPoolId}
          export REACT_APP_redirectSignIn="https://${fullCloudfrontDomain}/auth_demo/"

          cd .build
          make auth_demo_build

      - name: deploy website
        run: |
          staticBucketName=$(aws cloudformation list-exports --query "Exports[?Name=='${{ inputs.SERVICE_NAME }}-stateful-resources:StaticContentBucket:Name'].Value" --output text)
          aws s3 cp ".build/packages/staticContent/404.html" "s3://${staticBucketName}/404.html"
          aws s3 cp ".build/packages/staticContent/404.css" "s3://${staticBucketName}/404.css"
          aws s3 cp ".build/packages/staticContent/500.html" "s3://${staticBucketName}/500.html"
          aws s3 cp ".build/packages/staticContent/jwks/${{ inputs.TARGET_ENVIRONMENT }}/jwks.json" "s3://${staticBucketName}/jwks.json"
          aws s3 cp --recursive ".build/packages/cpt-ui/dist/" "s3://${staticBucketName}/${{ inputs.VERSION_NUMBER }}/"
          aws s3 cp  ".build/packages/cpt-ui/dist/assets/" "s3://${staticBucketName}/source_maps/${{ inputs.COMMIT_ID }}/site/assets/" --exclude "*" --include "*.map" --recursive

      - name: deploy auth_demo website (temp for testing)
        run: |
          staticBucketName=$(aws cloudformation list-exports --query "Exports[?Name=='${{ inputs.SERVICE_NAME }}-stateful-resources:StaticContentBucket:Name'].Value" --output text)
          aws s3 cp --recursive ".build/packages/auth_demo/build/" "s3://${staticBucketName}/auth_demo/"

      - name: fix cdk.json for deployment for stateless stack
        run: |
          ./.github/scripts/fix_cdk_json.sh .build/stateless_resources.json
          echo "******"
          cat .build/stateless_resources.json
        env:
          SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
          VERSION_NUMBER: "${{ inputs.VERSION_NUMBER }}"
          COMMIT_ID: "${{ inputs.COMMIT_ID }}"
          LOG_RETENTION_IN_DAYS: "30"
          LOG_LEVEL: "${{ inputs.LOG_LEVEL }}"
          AUTO_DELETE_OBJECTS: "true"
          USE_MOCK_OIDC: "${{ inputs.useMockOidc }}"
          PRIMARY_OIDC_CLIENT_ID: "${{ secrets.primaryOidcClientId }}"
          PRIMARY_OIDC_ISSUER: "${{ inputs.primaryOidcIssuer }}"
          PRIMARY_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.primaryOidcAuthorizeEndpoint }}"
          PRIMARY_OIDC_TOKEN_ENDPOINT: "${{ inputs.primaryOidcTokenEndpoint }}"
          PRIMARY_OIDC_USERINFO_ENDPOINT: "${{ inputs.primaryOidcUserInfoEndpoint }}"
          PRIMARY_OIDC_JWKS_ENDPOINT: "${{ inputs.primaryOidcjwksEndpoint }}"
          MOCK_OIDC_CLIENT_ID: "${{ secrets.mockOidcClientId }}"
          MOCK_OIDC_ISSUER: "${{ inputs.mockOidcIssuer }}"
          MOCK_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.mockOidcAuthorizeEndpoint }}"
          MOCK_OIDC_TOKEN_ENDPOINT: "${{ inputs.mockOidcTokenEndpoint }}"
          MOCK_OIDC_USERINFO_ENDPOINT: "${{ inputs.mockOidcUserInfoEndpoint }}"
          MOCK_OIDC_JWKS_ENDPOINT: ${{ inputs.mockOidcjwksEndpoint }}
          USE_CUSTOM_COGNITO_DOMAIN: ${{ inputs.useCustomCognitoDomain }}
          ALLOW_LOCALHOST_ACCESS: ${{ inputs.allowLocalhostAccess }}
          APIGEE_CIS2_TOKEN_ENDPOINT: ${{ inputs.APIGEE_CIS2_TOKEN_ENDPOINT }}
          APIGEE_MOCK_TOKEN_ENDPOINT: ${{ inputs.APIGEE_MOCK_TOKEN_ENDPOINT }}
          APIGEE_PRESCRIPTION_ENDPOINT: ${{ inputs.APIGEE_PRESCRIPTIONS_ENDPOINT }}
          APIGEE_PERSONAL_DEMOGRAPHICS_ENDPOINT: ${{ inputs.APIGEE_PDS_ENDPOINT }}
          APIGEE_DOHS_ENDPOINT: ${{ inputs.APIGEE_DOHS_ENDPOINT }}
          APIGEE_API_KEY: ${{ secrets.APIGEE_API_KEY }}
          APIGEE_API_SECRET: ${{ secrets.APIGEE_API_SECRET }}
          APIGEE_PTL_DOHS_API_KEY: ${{ secrets.APIGEE_PTL_DOHS_API_KEY }}
          JWT_KID: ${{ inputs.JWT_KID }}
          ROLE_ID: ${{ inputs.ROLE_ID }}
          CDK_APP_NAME: StatelessResourcesApp
          USE_ZONE_APEX: ${{ inputs.USE_ZONE_APEX }}
          ROUTE53_EXPORT_NAME: ${{ inputs.ROUTE53_EXPORT_NAME }}

      - name: Show diff for stateless stack
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect_aws_for_deployment.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect_aws_for_deployment.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect_aws_for_deployment.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="true" \
          -e DEPLOY_CODE="false" \
          -e CONFIG_FILE_NAME="stateless_resources.json" \
          -e CDK_APP_PATH="packages/cdk/bin/StatelessResourcesApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash

      - name: Deploy code for stateless stack
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect_aws_for_deployment.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect_aws_for_deployment.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect_aws_for_deployment.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="false" \
          -e DEPLOY_CODE="true" \
          -e CONFIG_FILE_NAME="stateless_resources.json" \
          -e CDK_APP_PATH="packages/cdk/bin/StatelessResourcesApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash
      - name: update cloudfront kvs
        id: update_cloudfront_kvs
        shell: bash
        run: |
          # shellcheck disable=SC2140
          keyValueStore=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:KeyValueStore:Arn"'].Value" --output text)
          # shellcheck disable=SC2140
          cloudfrontDistributionId=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:cloudfrontDistribution:Id"'].Value" --output text)
          # shellcheck disable=SC2140
          primaryJwtPrivateKeyArn=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:primaryJwtPrivateKey:Arn"'].Value" --output text)
          # shellcheck disable=SC2140
          mockJwtPrivateKeyArn=$(aws cloudformation list-exports --region eu-west-2 --query "Exports[?Name=='"${{ inputs.SERVICE_NAME }}-stateless-resources:mockJwtPrivateKey:Arn"'].Value" --output text)

          newVersion="${{ inputs.VERSION_NUMBER }}"

          ETag=$(aws cloudfront-keyvaluestore describe-key-value-store \
              --kvs-arn="$keyValueStore" \
              --query ETag --output text)

          existing_keys=$(aws cloudfront-keyvaluestore list-keys --kvs-arn "$keyValueStore" --query "Items[?Key=='site_version']" --output text)

          # Check if "version" key exists
          if [[ -z "$existing_keys" ]]; then
            # Insert a new "version" key
            aws cloudfront-keyvaluestore put-key \
              --if-match="${ETag}" \
              --key=site_version \
              --value="$newVersion"\
              --kvs-arn "$keyValueStore"
            echo "Inserted new 'site_version' key with value $newVersion."
          else
            # Update the existing "version" key
            aws cloudfront-keyvaluestore update-keys \
              --if-match="${ETag}" \
              --kvs-arn "$keyValueStore" \
              --puts Key=site_version,Value="$newVersion"
            echo "Updated the 'site_version' key to $newVersion."
          fi

          # invalidate the cache
          aws cloudfront create-invalidation --distribution-id "${cloudfrontDistributionId}" --paths '/*'

          # set the primaryJwtPrivateKeyArn secret
          if [ -z "${primaryJwtPrivateKeyArn}" ]; then
            echo "primaryJwtPrivateKeyArn is unset or set to the empty string"
          else
            aws secretsmanager put-secret-value --secret-id "${primaryJwtPrivateKeyArn}" --secret-string "${{ secrets.CIS2_PRIVATE_KEY }}"
          fi
          # set the mockJwtPrivateKeyArn secret
          if [ -z "${mockJwtPrivateKeyArn}" ]; then
            echo "mockJwtPrivateKeyArn is unset or set to the empty string"
          else
            aws secretsmanager put-secret-value --secret-id "${mockJwtPrivateKeyArn}" --secret-string "${{ secrets.CIS2_PRIVATE_KEY }}"
          fi

      - name: fix cdk.json for deployment for stateful stack redeployment
        if: ${{ steps.check_first_deployment.outputs.FIRST_DEPLOYMENT == 'true' }}
        run: |
          ./.github/scripts/fix_cdk_json.sh .build/stateful_resources.json
          echo "******"
          cat .build/stateful_resources.json
        env:
          SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
          VERSION_NUMBER: "${{ inputs.VERSION_NUMBER }}"
          COMMIT_ID: "${{ inputs.COMMIT_ID }}"
          LOG_RETENTION_IN_DAYS: "30"
          LOG_LEVEL: "${{ inputs.LOG_LEVEL }}"
          AUTO_DELETE_OBJECTS: "true"
          USE_MOCK_OIDC: "${{ inputs.useMockOidc }}"
          PRIMARY_OIDC_CLIENT_ID: "${{ secrets.primaryOidcClientId }}"
          PRIMARY_OIDC_ISSUER: "${{ inputs.primaryOidcIssuer }}"
          PRIMARY_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.primaryOidcAuthorizeEndpoint }}"
          PRIMARY_OIDC_TOKEN_ENDPOINT: "${{ inputs.primaryOidcTokenEndpoint }}"
          PRIMARY_OIDC_USERINFO_ENDPOINT: "${{ inputs.primaryOidcUserInfoEndpoint }}"
          PRIMARY_OIDC_JWKS_ENDPOINT: "${{ inputs.primaryOidcjwksEndpoint }}"
          MOCK_OIDC_CLIENT_ID: "${{ secrets.mockOidcClientId }}"
          MOCK_OIDC_ISSUER: "${{ inputs.mockOidcIssuer }}"
          MOCK_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.mockOidcAuthorizeEndpoint }}"
          MOCK_OIDC_TOKEN_ENDPOINT: "${{ inputs.mockOidcTokenEndpoint }}"
          MOCK_OIDC_USERINFO_ENDPOINT: "${{ inputs.mockOidcUserInfoEndpoint }}"
          MOCK_OIDC_JWKS_ENDPOINT: ${{ inputs.mockOidcjwksEndpoint }}
          USE_CUSTOM_COGNITO_DOMAIN: ${{ inputs.useCustomCognitoDomain }}
          ALLOW_LOCALHOST_ACCESS: ${{ inputs.allowLocalhostAccess }}
          APIGEE_CIS2_TOKEN_ENDPOINT: ${{ inputs.APIGEE_CIS2_TOKEN_ENDPOINT }}
          APIGEE_MOCK_TOKEN_ENDPOINT: ${{ inputs.APIGEE_MOCK_TOKEN_ENDPOINT }}
          APIGEE_PRESCRIPTION_ENDPOINT: ${{ inputs.APIGEE_PRESCRIPTIONS_ENDPOINT }}
          APIGEE_PERSONAL_DEMOGRAPHICS_ENDPOINT: ${{ inputs.APIGEE_PDS_ENDPOINT }}
          APIGEE_DOHS_ENDPOINT: ${{ inputs.APIGEE_DOHS_ENDPOINT }}
          APIGEE_API_KEY: ${{ secrets.APIGEE_API_KEY }}
          APIGEE_API_SECRET: ${{ secrets.APIGEE_API_SECRET }}
          APIGEE_PTL_DOHS_API_KEY: ${{ secrets.APIGEE_PTL_DOHS_API_KEY }}
          JWT_KID: ${{ inputs.JWT_KID }}
          ROLE_ID: ${{ inputs.ROLE_ID }}
          CDK_APP_NAME: StatefulResourcesApp
          USE_ZONE_APEX: ${{ inputs.USE_ZONE_APEX }}
          ROUTE53_EXPORT_NAME: ${{ inputs.ROUTE53_EXPORT_NAME }}

      - name: Show diff for stateful stack redeployment
        if: ${{ steps.check_first_deployment.outputs.FIRST_DEPLOYMENT == 'true' }}
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect_aws_for_deployment.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect_aws_for_deployment.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect_aws_for_deployment.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="true" \
          -e DEPLOY_CODE="false" \
          -e CONFIG_FILE_NAME="stateful_resources.json" \
          -e CDK_APP_PATH="packages/cdk/bin/StatefulResourcesApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash

      - name: Deploy code for stateful stack redeployment
        if: ${{ steps.check_first_deployment.outputs.FIRST_DEPLOYMENT == 'true' }}
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect_aws_for_deployment.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect_aws_for_deployment.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect_aws_for_deployment.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="false" \
          -e DEPLOY_CODE="true" \
          -e CONFIG_FILE_NAME="stateful_resources.json" \
          -e CDK_APP_PATH="packages/cdk/bin/StatefulResourcesApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash

  update_github_pages:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    if: ${{ always() && !failure() && !cancelled() }}
    needs: [release_all_code]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout gh-pages
        if: ${{ !startsWith(inputs.SERVICE_NAME, 'cpt-ui-pr-') }}
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: update release tag in github pages
        if: ${{ !startsWith(inputs.SERVICE_NAME, 'cpt-ui-pr-') }}
        run: |
          cd gh-pages
          NOW=$(date +'%Y-%m-%dT%H:%M:%S')
          echo "tag,release_datetime" > _data/${{ inputs.TARGET_ENVIRONMENT }}_latest.csv
          echo "${{ inputs.VERSION_NUMBER }},${NOW}" >> _data/${{ inputs.TARGET_ENVIRONMENT }}_latest.csv
          echo "${{ inputs.VERSION_NUMBER }},${NOW}" >> _data/${{ inputs.TARGET_ENVIRONMENT }}_deployments.csv
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add _data/${{ inputs.TARGET_ENVIRONMENT }}_latest.csv
          git add _data/${{ inputs.TARGET_ENVIRONMENT }}_deployments.csv
          git commit -m 'update releases for ${{ inputs.TARGET_ENVIRONMENT }}'
          parallel --retries 10 --delay 3 ::: "git pull --rebase && git push"

  regression_tests:
    name: Regression Tests
    uses: ./.github/workflows/run_regression_tests.yml
    if: ${{ always() && !failure() && !cancelled() && inputs.RUN_REGRESSION_TESTS == true }}
    needs: [release_all_code]
    with:
      ENVIRONMENT: ${{ inputs.TARGET_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
    secrets:
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}
