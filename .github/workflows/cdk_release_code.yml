name: cdk release code

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      TARGET_ENVIRONMENT:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
      CDK_APP_NAME:
        required: true
        type: string
      LOG_RETENTION_IN_DAYS:
        required: true
        type: string
      LOG_LEVEL:
        type: string
      useMockOidc:
        type: boolean
        default: false
      primaryOidcIssuer:
        type: string
      primaryOidcAuthorizeEndpoint:
        type: string
      primaryOidcTokenEndpoint:
        type: string
      primaryOidcUserInfoEndpoint:
        type: string
      primaryOidcjwksEndpoint:
        type: string
      mockOidcIssuer:
        type: string
      mockOidcAuthorizeEndpoint:
        type: string
      mockOidcTokenEndpoint:
        type: string
      mockOidcUserInfoEndpoint:
        type: string
      mockOidcjwksEndpoint:
        type: string
      allowLocalhostAccess:
        type: boolean
      useCustomCognitoDomain:
        type: boolean
      APIGEE_CIS2_TOKEN_ENDPOINT:
        type: string
      APIGEE_MOCK_TOKEN_ENDPOINT:
        type: string
      APIGEE_PRESCRIPTIONS_ENDPOINT:
        type: string
      APIGEE_PDS_ENDPOINT:
        type: string
      JWT_KID:
        type: string
      ROLE_ID:
        type: string
      CONFIG_FILE:
        type: string
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true
      CDK_PULL_IMAGE_ROLE:
        required: true
      primaryOidcClientId:
        required: false
      mockOidcClientId:
        required: false
      APIGEE_API_KEY:
        required: false
      APIGEE_API_SECRET:
        required: false
jobs:
  release_code:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    name: deploy cdk app ${{ inputs.CDK_APP_NAME }}
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout local github actions
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
          sparse-checkout: |
            .github

      - name: Configure AWS Credentials
        id: connect-aws-pull-image
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CDK_PULL_IMAGE_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-pull-image

      - name: build_artifact download
        uses: actions/download-artifact@v4
        with:
          name: build_artifact

      - name: extract build_artifact
        run: |
          mkdir -p .build
          tar -xf artifact.tar -C .build

      - name: Retrieve AWS Account ID
        id: retrieve-account-id
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

      - name: Pull cdk-utils-build from Amazon ECR
        run: |
          docker pull "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest"
          docker tag "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest" cdk-utils-build-repo:latest

      - name: Configure AWS Credentials
        id: connect-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-deployment
          output-credentials: true
  
      - name: fix cdk.json for deployment
        run: |
          ./.github/scripts/fix_cdk_json.sh .build/${{ inputs.CONFIG_FILE }}
          echo "******"
          cat .build/${{ inputs.CONFIG_FILE }}
        env:
          SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
          VERSION_NUMBER: "${{ inputs.VERSION_NUMBER }}"
          COMMIT_ID: "${{ inputs.COMMIT_ID }}"
          LOG_RETENTION_IN_DAYS: "${{ inputs.LOG_RETENTION_IN_DAYS }}"
          LOG_LEVEL: "${{ inputs.LOG_LEVEL }}"
          AUTO_DELETE_OBJECTS: "true"
          USE_MOCK_OIDC: "${{ inputs.useMockOidc }}"
          PRIMARY_OIDC_CLIENT_ID: "${{ secrets.primaryOidcClientId }}"
          PRIMARY_OIDC_ISSUER: "${{ inputs.primaryOidcIssuer }}"
          PRIMARY_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.primaryOidcAuthorizeEndpoint }}"
          PRIMARY_OIDC_TOKEN_ENDPOINT: "${{ inputs.primaryOidcTokenEndpoint }}"
          PRIMARY_OIDC_USERINFO_ENDPOINT: "${{ inputs.primaryOidcUserInfoEndpoint }}"
          PRIMARY_OIDC_JWKS_ENDPOINT: "${{ inputs.primaryOidcjwksEndpoint }}"
          MOCK_OIDC_CLIENT_ID: "${{ secrets.mockOidcClientId }}"
          MOCK_OIDC_ISSUER: "${{ inputs.mockOidcIssuer }}"
          MOCK_OIDC_AUTHORIZE_ENDPOINT: "${{ inputs.mockOidcAuthorizeEndpoint }}"
          MOCK_OIDC_TOKEN_ENDPOINT: "${{ inputs.mockOidcTokenEndpoint }}"
          MOCK_OIDC_USERINFO_ENDPOINT: "${{ inputs.mockOidcUserInfoEndpoint }}"
          MOCK_OIDC_JWKS_ENDPOINT: ${{ inputs.mockOidcjwksEndpoint }}
          USE_CUSTOM_COGNITO_DOMAIN: ${{ inputs.useCustomCognitoDomain }}
          ALLOW_LOCALHOST_ACCESS: ${{ inputs.allowLocalhostAccess }}
          APIGEE_CIS2_TOKEN_ENDPOINT: ${{ inputs.APIGEE_CIS2_TOKEN_ENDPOINT }}
          APIGEE_MOCK_TOKEN_ENDPOINT: ${{ inputs.APIGEE_MOCK_TOKEN_ENDPOINT }}
          APIGEE_PRESCRIPTION_ENDPOINT: ${{ inputs.APIGEE_PRESCRIPTIONS_ENDPOINT }}
          APIGEE_PERSONAL_DEMOGRAPHICS_ENDPOINT: ${{ inputs.APIGEE_PDS_ENDPOINT }}
          APIGEE_API_KEY: ${{ secrets.APIGEE_API_KEY }}
          JWT_KID: ${{ inputs.JWT_KID }}
          ROLE_ID: ${{ inputs.ROLE_ID }}
          CDK_APP_NAME: ${{ inputs.CDK_APP_NAME }}

      - name: Show diff
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect-aws.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect-aws.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect-aws.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="true" \
          -e DEPLOY_CODE="false" \
          -e CONFIG_FILE_NAME="${{ inputs.CONFIG_FILE }}" \
          -e CDK_APP_PATH="packages/cdk/bin/${{ inputs.CDK_APP_NAME }}.ts" \
          cdk-utils-build-repo:latest
        shell: bash

      - name: Deploy code
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect-aws.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect-aws.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect-aws.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="false" \
          -e DEPLOY_CODE="true" \
          -e CONFIG_FILE_NAME="${{ inputs.CONFIG_FILE }}" \
          -e CDK_APP_PATH="packages/cdk/bin/${{ inputs.CDK_APP_NAME }}.ts" \
          cdk-utils-build-repo:latest
        shell: bash
