AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS Cognito User Pool

Globals:
  Function:
    Timeout: 50
    MemorySize: 256
    Architectures:
      - x86_64
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_OPTIONS: "--enable-source-maps"

Parameters:
  StackName:
    Type: String
  PrimaryOIDCClientID:
    Type: String
  PrimaryOIDClientSecret:
    Type: String
  PrimaryOIDCIssuer:
    Type: String
  PrimaryOIDCAuthorizeEndpoint:
    Type: String
  PrimaryOIDCTokenEndpoint:
    Type: String
  PrimaryOIDCUserInfoEndpoint:
    Type: String
  PrimaryOIDCJWKSEndpoint:
    Type: String
  TokenMappingTableName:
    Type: String
  UserPoolTLSCertificateArn:
    Type: String

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  UserPoolRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Join
        - .
        - - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain
      Type: A
      HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID
      ResourceRecords:
        - 127.0.0.1
      TTL: 900

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: UserPoolRecordSet
    Properties:
      UserPoolId: !Ref UserPool
      #      Domain: !Ref StackName
      CustomDomainConfig:
        CertificateArn: !Ref UserPoolTLSCertificateArn
      Domain: !Join
        - .
        - - "id"
          - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain

  UserPoolDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Join
        - .
        - - "id"
          - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain
      Type: A
      HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID
      AliasTarget:
        DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
        EvaluateTargetHealth: false
        HostedZoneId: "Z2FDTNDATAQYW2"

  UserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: "Primary" # This is the name of the provider we will use in our app to sign in
      ProviderType: "OIDC"
      ProviderDetails:
        oidc_issuer: !Ref PrimaryOIDCIssuer
        authorize_scopes: "openid profile email"
        attributes_request_method: "GET"
        client_id: !Ref PrimaryOIDCClientID
        client_secret: !Ref PrimaryOIDClientSecret
        attributes_url: !Ref PrimaryOIDCUserInfoEndpoint
        authorize_url: !Sub
          - https://auth.${StackName}.${domain}/auth
          - domain: !ImportValue eps-route53-resources:EPS-domain
        token_url: !Sub
          - https://auth.${StackName}.${domain}/token
          - domain: !ImportValue eps-route53-resources:EPS-domain
        jwks_uri: !Ref PrimaryOIDCJWKSEndpoint
      AttributeMapping:
        username: "sub"
        email: "email"
        email_verified: "email_verified"
        phone_number: "phone_number"
        phone_number_verified: "phone_number_verified"
        profile: "profile"

  ClientUserPool:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: UserPoolIdentityProvider
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - phone
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - http://localhost:3000/auth/
      LogoutURLs:
        - http://localhost:3000/
      SupportedIdentityProviders:
        - COGNITO
        - !Ref UserPoolIdentityProvider
      UserPoolId: !Ref UserPool

  Auth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-auth
      CodeUri: ../../packages
      Handler: auth.handler
      Role: !GetAtt AuthResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          proxy_callback_uri: !Sub
            - https://auth.${StackName}.${domain}/callback
            - domain: !ImportValue eps-route53-resources:EPS-domain
          idp_auth_uri: !Ref PrimaryOIDCAuthorizeEndpoint
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK
          - LAMBDA_INSIDE_VPC
          - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: cognito/tsconfig.json
        packages: bundle
        EntryPoints:
          - cognito/src/auth.ts

  AuthResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../functions/lambda_resources.yaml
      Parameters:
        StackName: !Ref StackName
        LambdaName: !Sub ${StackName}-auth
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-auth
        IncludeAdditionalPolicies: false
        LogRetentionInDays: 30
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        EnableSplunk: False
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream

  Callback:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-callback
      CodeUri: ../../packages
      Handler: callback.handler
      Role: !GetAtt CallbackResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          cognito_idp_response_uri: !Sub
            - https://id.${StackName}.${domain}/oauth2/idpresponse
            - domain: !ImportValue eps-route53-resources:EPS-domain
          idp_auth_uri: !Ref PrimaryOIDCAuthorizeEndpoint
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK
          - LAMBDA_INSIDE_VPC
          - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: cognito/tsconfig.json
        packages: bundle
        EntryPoints:
          - cognito/src/callback.ts

  CallbackResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../functions/lambda_resources.yaml
      Parameters:
        StackName: !Ref StackName
        LambdaName: !Sub ${StackName}-callback
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-callback
        IncludeAdditionalPolicies: false
        LogRetentionInDays: 30
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        EnableSplunk: False
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream

  Token:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-token
      CodeUri: ../../packages
      Handler: token.handler
      Role: !GetAtt TokenResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          idp_token_path: !Ref PrimaryOIDCTokenEndpoint
          ResponseUri: !Sub
            - https://auth.${StackName}.${domain}/callback
            - domain: !ImportValue eps-route53-resources:EPS-domain
          TokenMappingTableName: !Ref TokenMappingTableName
          UserPoolIdentityProvider: !Ref UserPoolIdentityProvider
          jwks_uri: !Ref PrimaryOIDCJWKSEndpoint
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK
          - LAMBDA_INSIDE_VPC
          - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: cognito/tsconfig.json
        packages: bundle
        EntryPoints:
          - cognito/src/token.ts

  TokenResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../functions/lambda_resources.yaml
      Parameters:
        StackName: !Ref StackName
        LambdaName: !Sub ${StackName}-token
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-token
        IncludeAdditionalPolicies: true
        AdditionalPolicies: !Join
          - ","
          - - Fn::ImportValue: !Sub ${StackName}:tables:${TokenMappingTableName}:TableWritePolicyArn
            - Fn::ImportValue: !Sub ${StackName}:tables:${TokenMappingTableName}:TableReadPolicyArn
            - Fn::ImportValue: !Sub ${StackName}:tables:UseTokensMappingKMSKeyPolicyArn
        LogRetentionInDays: 30
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        EnableSplunk: False
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream

  RestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${StackName}-apigw-cognito
      EndpointConfiguration:
        Types:
          - REGIONAL

  RestApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Join
        - .
        - - "auth"
          - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain
      RegionalCertificateArn: !Ref GenerateCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  RestApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Join
        - .
        - - "auth"
          - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain
      Type: A
      HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID
      AliasTarget:
        DNSName: !GetAtt RestApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt RestApiDomain.RegionalHostedZoneId

  RestApiDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref RestApiDomain
      RestApiId: !Ref RestApiGateway
      Stage: !Ref RestApiGatewayStage

  RestApiGatewayResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../apis/api_resources.yaml
      Parameters:
        AdditionalPolicies: !Join
          - ","
          - - !GetAtt TokenResources.Outputs.ExecuteLambdaPolicyArn
            - !GetAtt CallbackResources.Outputs.ExecuteLambdaPolicyArn
            - !GetAtt AuthResources.Outputs.ExecuteLambdaPolicyArn
        ApiName: !Sub ${StackName}-apigw-cognito
        LogRetentionInDays: 30

  AuthAPIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !GetAtt RestApiGateway.RootResourceId
      PathPart: auth

  AuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref AuthAPIGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt RestApiGatewayResources.Outputs.ApiGwRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Auth.Arn}/invocations

  CallbackAPIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !GetAtt RestApiGateway.RootResourceId
      PathPart: callback

  CallbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref CallbackAPIGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt RestApiGatewayResources.Outputs.ApiGwRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Callback.Arn}/invocations

  TokenAPIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !GetAtt RestApiGateway.RootResourceId
      PathPart: token

  TokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref TokenAPIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt RestApiGatewayResources.Outputs.ApiGwRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Token.Arn}/invocations

  # *********************************************************************
  # If you add a new endpoint, then you need to change the name of this resource
  # You also need to change it in RestApiGatewayStage.Properties.DeploymentId
  # *********************************************************************
  RestApiGatewayDeploymentB:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      # see note above if you add something in here when you add a new endpoint
      - AuthMethod
      - CallbackMethod
      - TokenMethod
    Properties:
      RestApiId: !Ref RestApiGateway

  RestApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApiGateway
      StageName: prod
      # See note above RestApiGatewayDeployment, if a new endpoint is added, then this resource name will need updating
      DeploymentId: !Ref RestApiGatewayDeploymentB
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt RestApiGatewayResources.Outputs.ApiGwAccessLogsArn
        Format: '{ "requestTime": "$context.requestTime", "apiId": "$context.apiId", "accountId": "$context.accountId", "resourcePath": "$context.resourcePath", "stage": "$context.stage", "requestId": "$context.requestId", "extendedRequestId": "$context.extendedRequestId", "status": "$context.status", "httpMethod": "$context.httpMethod", "protocol": "$context.protocol", "path": "$context.path", "responseLatency": "$context.responseLatency", "responseLength": "$context.responseLength", "domainName": "$context.domainName", "identity": { "sourceIp": "$context.identity.sourceIp", "userAgent": "$context.identity.userAgent", "clientCert":{ "subjectDN": "$context.identity.clientCert.subjectDN", "issuerDN": "$context.identity.clientCert.issuerDN", "serialNumber": "$context.identity.clientCert.serialNumber", "validityNotBefore": "$context.identity.clientCert.validity.notBefore", "validityNotAfter": "$context.identity.clientCert.validity.notAfter" }}, "integration":{ "error": "$context.integration.error", "integrationStatus": "$context.integration.integrationStatus", "latency": "$context.integration.latency", "requestId": "$context.integration.requestId", "status": "$context.integration.status" }}'

  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName: !Join
        - .
        - - "auth"
          - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain
      DomainValidationOptions:
        - DomainName: !Join
            - .
            - - "auth"
              - !Ref StackName
              - !ImportValue eps-route53-resources:EPS-domain
          HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID

Outputs:
  UserPoolId:
    Description: ID of the created Cognito User Pool
    Value: !Ref UserPool
  UserPoolArn:
    Description: ID of the created Cognito User Pool
    Value: !GetAtt UserPool.Arn
  UserPoolClientId:
    Description: ID of the created Cognito User Pool client
    Value: !Ref ClientUserPool
  HostedLoginDomain:
    Description: Hosted login domain
    Value: !Ref UserPoolDomain
